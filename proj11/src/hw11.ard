\import lect11

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

--\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  \lam x y => \lam r => p x y (q (f x) (f y) r)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam x y => \lam r => p x y (pmap g r)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.


\func isMultipleOf3Or5 (n : Nat) : \Type => T (helper n)
  \where \func helper (n : Nat) : Bool => \case mod3 n, mod5 n \with {
    | 0, _ => true
    | _, 0 => true
    | _, _ => false
  }

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) =>
  \lam x y => T-lem

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc =>
  \lam t1 t2 (p : t1.1 = t2.1) => sigmaEq (\lam n => T (isMultipleOf3Or5.helper n)) t1 t2 p T-lem

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)


\func sym {A : \Type} {a a' : A} (p : a = a') : a' = a
  => transport (\lam x => x = a) p idp
\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  ( \lam x => (\lam a b => trans (sym (x.2 a)) (x.2 b), x.1), \lam x => (x.2, x.1 x.2) )

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty => {?}

-- 5. Докажите, что LessOrEq и LessOrEq' являются предикатами.

\data LessOrEq (n m : Nat) \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\data LessOrEq' (n m : Nat) \elim m
  | suc m => <=-step (LessOrEq' n m)
  | m => <=-refl (n = m)

--\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) =>
--  \lam x y => \case n, m, x, y \with {
--    | 0, m, z<=n, z<=n => {?} -- 'z<=n' is not a constructor of data type LessOrEq n m ?
--    | suc n, suc m, s<=s x, s<=s y => {?}
--  }

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) =>
  \lam x y => helper n m x y
      \where \func helper (n m : Nat) (x y : LessOrEq n m) : x = y \elim n, m, x, y
        | 0, m, z<=n, z<=n => idp
        | suc n, suc m, s<=s x, s<=s y => pmap (s<=s) (helper n m x y)

-- Для решения LessOrEq'-isProp понадобится тот факт, что Nat является множеством.
-- Ниже приведено доказательство этого факта, которое можно использовать.
-- Пояснение к этому доказательству будет дано позже.
\func Nat-isSet : isSet Nat => \lam _ _ => Path.inProp

\func LessOrEq'-isProp {n m : Nat} : isProp (LessOrEq' n m) =>
  \lam x y => helper n m x y
  \where \func helper (n m : Nat) (x y : LessOrEq' n m) : x = y \elim n, m, x, y
    | n, suc m, <=-step x, <=-step y => pmap (<=-step) (helper n m x y)
    | n, m, <=-refl x, <=-refl y => pmap (<=-refl) (equality-isProp Nat-isSet n m x y)
    | n, suc m, <=-step x, <=-refl y => absurd (lem1 (LessOrEq'->lessOrEq x) y)
    | n, suc m, <=-refl x, <=-step y => absurd (lem1 (LessOrEq'->lessOrEq y) x)

\func suc/=0 {n : Nat} (p : suc n = 0) : Empty => transport (\lam n => \case n \with { | 0 => Empty | suc _ => Unit }) p unit

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func lem1 {n m : Nat} (p1 : lessOrEq n m) (p2 : n = suc m) : Empty \elim n, m
  | 0, _ => suc/=0 (sym p2)
  | suc n, 0 => p1
  | suc n, suc m => lem1 p1 (pmap (pred) p2)

\func LessOrEq'->lessOrEq {n m : Nat} (p : LessOrEq' n m) : lessOrEq n m \elim n, m, p
  | 0, _, _ => unit
  | suc _, 0, p => \case p \with { | <=-refl p => absurd (suc/=0 p)}
  | suc n, suc m, p => \case p \with {
    | <=-refl p' => LessOrEq'->lessOrEq (<=-refl (pmap pred p'))
    | <=-step p' => \case LessOrEq'->lessOrEq p' \with {
      | t => lemma t
    }
  }

\func lessOrEq (n m : Nat) : \Type
  | 0, _ => Unit
  | suc _, 0 => Empty
  | suc n, suc m => lessOrEq n m

\func lemma {n m : Nat} (p : lessOrEq (suc n) m) : lessOrEq n m \elim n, m
  | 0, _ => unit
  | suc _, 0 => p
  | suc x, suc y => lemma p

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => {?}

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty => {?}

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A =>
  \lam x y => \let a => p x y \in \let b => q (f x) (f y) \in a b