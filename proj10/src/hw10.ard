\import lect10

-- 1. Определите функцию sscanf.

-- 2. Определите тип бинарных сортированных деревьев.
--    То есть таких деревьев, в которых для любого узла верно, что все элементы в левом поддереве меньше либо равны, чем значение в узле, которое меньше либо равно, чем все элементы в правом поддереве.

-- 3. Реализуйте функцию сортировки, возвращающую SortedList.

\func insert'' {A : TotalPoset} (x : A) (ys : SortedList A) :
  \Sigma
  (s : SortedList A)
  (\Pi (y : A) -> (y <= x) -> (HeadL y ys) -> (HeadL y s))
  \elim ys
  | snil => (scons x snil nilL, \lam _ a _ => consL a)
  | scons y snil h => \case totality x y \with {
    | inl true => \let list => (scons y snil h) \in
      (scons x list (consL {A} true : HeadL {A} x list), \lam _ a _ => consL a)
    | inr false => \let list => (scons x snil nilL) \in
      (scons y list (consL {A} false : HeadL {A} y list),
        \lam _ _ h => \case h \with { | consL x => consL x })
  }
  | scons y (scons y' ys' h') h => \case totality x y \with {
    | inl true => \let list => scons y (scons y' ys' h') h \in
      (scons x list (consL {A} true : HeadL {A} x list), \lam _ a _ => consL a)
    | inr false => \let pair_list_func => insert'' x (scons y' ys' h') \in
      (scons y pair_list_func.1 (pair_list_func.2 y false h),
        \lam _ _ h => \case h \with { | consL x => consL x })
    }

\func sort {A : TotalPoset} (xs : List A) : SortedList A \elim xs
  | nil => snil
  | cons x xs => (insert'' x (sort xs)).1

-- 4. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условияЖ
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs
--

