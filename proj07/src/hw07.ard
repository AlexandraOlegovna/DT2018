\import lect07
\open Nat

-- 1. Реализуйте любой алгоритм сортировки, используя with для паттерн матчинга на результате сравнения элементов списка.

\func insert {A : \Type} (f : A -> A -> Bool) (x : A) (ys : List A) : List A \elim ys
    | nil => cons x nil
    | cons y ys => \case f x y \with {
                    | true => cons x (cons y ys)
                    | false => cons y (insert f x ys)
                    }

\func insertionSort {A : \Type} (f : A -> A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => insert f x (insertionSort f xs)

-- 2. Определите filter через if, а не через with.
--    Докажите для этой версии filter лемму filter-lem.

\func if {A : \Type} (b : Bool) (t e : A) : A \elim b
    | true => t
    | false => e

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs =>
        if (p x)
            (cons x (filter' p xs))
            (filter' p xs)

\func filter-lem' {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) <= length xs \elim xs
  | nil => unit
  | cons x xs =>
  \case p x \as b \return length (if b (cons x (filter' p xs)) (filter' p xs)) <= suc (length xs) \with {
    | true => filter-lem' p xs
    | false => <=-helper (filter-lem' p xs)
  }

-- 3. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\open Eq(==)

\func cons/=nil {A : \Type} {n : A} {ns : List A} (p : cons n ns = nil) : Empty =>
    transport (\lam n =>
        \case n \with {
            | nil => Empty
            | cons _ _ => Unit }) p unit

\func head {A : \Type} (xs : List A) (default : A) : A \elim xs
  | nil => default
  | cons x _ => x

\func flip {A B C : \Type } (f : A -> B -> C) (b : B) (a : A) => f a b

\func tail {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons _ xs => xs

\func absurd {A : \Type} (e : Empty) : A

\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
    => transport (\lam x => a = x) q p

\func helper {A : \Type} {x y : A} {xs ys : List A} (p1 : x = y) (p2 : xs = ys) : cons x xs = cons y ys \elim xs, ys
  | nil, nil => pmap (flip cons nil) p1
  | cons a as, cons b bs => trans (pmap (cons x) p2) (pmap (flip cons (cons b bs)) p1)
  | nil, cons _ _ => absurd ((\lam p => cons/=nil (sym p)) p2)
  | cons _ _ , nil => absurd (cons/=nil p2)

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => decideEq
      \where
        \func decideEq {A : \Type} {dec : Eq A} (x y : List A) : Decide (x = y) \elim x, y
              | nil, nil => yes idp
              | nil, cons _ _ => no (\lam p => cons/=nil (sym p))
              | cons _ _, nil => no cons/=nil
              | cons x xs, cons y ys => \case dec.decideEq x y, decideEq {A} {dec} xs ys \with {
                | no c, _ => no (\lam p => c (pmap (flip head x) p))
                | yes _, no c => no (\lam p => c (pmap tail p))
                | yes p1, yes p2 => yes (helper p1 p2)
              }

-- 4. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func isEven-dec : DecPred isEven => \lam n =>
    \case parity n \with {
        | even k p => yes (k, p)
        | odd k p => no (\lam x => isEven/=odd (trans (sym x.2) p))
      }

\func isEven/=odd {n k : Nat} (p : 2 * n = suc (2 * k)) : Empty \elim n, k
    | 0, 0 => absurd ((\lam p => suc/=0 (sym p)) p)
    | 0, suc _ => absurd ((\lam p => suc/=0 (sym p)) p)
    | suc _, 0 => absurd (suc/=0 (pmap pred p))
    | suc x, suc y => absurd (isEven/=odd {x} {y} (pmap pred (pmap pred p)))

-- 5. Докажите, что если равенство элементов A разрешимо, то любой список элементов A либо пуст, либо состоит из повторений одного элемента, либо в A существует два различных элемента.

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

\func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs \elim xs
  | nil => empty idp
  | cons x xs => \case lemma xs {dec} \with {
    | empty p => repeated 1 x (pmap (cons x) p)
    | repeated n a p1 => \case dec x a \with {
      | yes p2 => repeated (suc n) a (helper p2 p1)
      | no c => A-is-not-trivial x a c
    }
    | A-is-not-trivial a a' p => A-is-not-trivial a a' p
  }

-- 6. Определите view, представляющий число в виде частного и остатка от деления его на произвольное (неотрицательное) число m.
--    Реализуйте функцию деления.

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : T (r < m)) (p : n = q * m + r)

\func +-assoc (x y z : Nat) : (x + y) + z = x + (y + z) \elim z
  | zero => idp
  | suc z => pmap suc (+-assoc x y z)

\func +-comm (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | 0, suc m => pmap suc (+-comm 0 m)
  | suc n, 0 => pmap suc (+-comm n 0)
  | suc n, suc m => pmap suc (+-comm (suc n) m *> pmap suc (sym (+-comm n m)) *> +-comm n (suc m))

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
  => transport (\lam x => a = x) q p

\func \infixr 5 <* {A : \Type} {a' a'' a : A} (q : a' = a) (p : a' = a'') : a = a''
  => transport (\lam x => x = a'') q p

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func lemma1 (x : Nat) : suc x = suc (0 + x)
  | 0 => idp
  | suc x => \let a => lemma1 x \in pmap suc a

\func lemma2 (x : Nat) : 0 * x = 0
  | 0 => idp
  | suc x => lemma2 x

\func lemma3 (q m : Nat) : q * m + q + m = (suc q) * m + q \elim m
  | 0 => idp
  | suc m => \let x => lemma3 q m \in \let a => pmap (\lam y => y + q) x \in
    \let a2 => pmap suc ((lemma4 (q * m + q) m q) <* a) \in a2 *> lemma5 (suc q * m + q) q

\func lemma4 (a b c : Nat) : (a + b) + c = (a + c) + b =>
  -- a + (b + c) => a + (c + b) => (a + c) + b
  (+-assoc a b c) *> (pmap (+ a) (+-comm b c)) *> (sym (+-assoc a c b))

\func lemma5 (a b : Nat) : suc (a + b) = suc a + b \elim b
  | 0 => idp
  | suc b => pmap suc (lemma5 a b)

\func lemma6 (r m : Nat) (p : T (r < suc m)) (q : suc r = suc m -> Empty) : T (r < m) \elim r, m
  | 0, 0 => absurd (q idp)
  | 0, suc m => p
  | suc r, 0 => lemma7 r p
  | suc r, suc m => lemma6 r m p (\lam p' => q (pmap suc p'))

\func lemma7 (r : Nat) (p : T (r < 0)) : T false \elim r
  | 0 => p
  | suc r => p


\func mod-view (m n : Nat) (t : T (0 < m)) : ModView m n \elim m, n
  | 0, 0 => quot-rem 0 0 t idp
  | 0, suc n => quot-rem 0 (suc n) t (lemma1 n)
  | suc m, 0 => quot-rem 0 0 t (sym (lemma2 m))
  | suc m, suc n => \case mod-view (suc m) n t \with {
    | quot-rem q' r' t' p' => \case NatEq.decideEq (suc r') (suc m) \with {
      | yes a => quot-rem (suc q') 0 t (pmap suc (
        \let x1 => pmap (pred) a \in
        \let x2 => pmap (\lam x => q' * m + q' + x) x1 \in
                  (trans p' x2) *> (lemma3 q' m)
      ))
      | no a => quot-rem q' (suc r') (lemma6 r' m t' a) (pmap suc p')
    }
  }

\func div (n m : Nat) (t : T (0 < m)) : Nat =>
  \case mod-view m n t \with {
    | quot-rem q _ _ _ => q
  }

-- 7. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p => {?}

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func \infix 4 <-> {A : \Type} (P Q : A -> \Type) => \Pi (x : A) -> \Sigma (P x -> Q x) (Q x -> P x)

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : (FromBoolToDec (FromDecToBool P)).1 <-> P.1 => {?}